name: "Deploy Terraform Code for FIS environment"
on:
  push:
    branches: ["main"]
    paths:
      - "terraform/**"
      - ".github/workflows/test1.yml"
      
env:
  NON_PROD_ENVIRONMENT: "NonProd"
  PROD_ENVIORNMENT: "Prod"
  # TF_STATE_BUCKET_NAME: ${{ vars.TF_BUCKET_NAME }}
  #TF_STATE_BUCKET_NAME: "aws3-non-prod-state-bucket"
  # TF_DYNAMODB_TABLE: ${{ vars.TF_DDB_NAME }}
  #TF_DYNAMODB_TABLE: "aws3-non-prod-state-lock"
  REGION: "eu-west-2"
jobs:
  CodeScanning:
    runs-on: ubuntu-latest
    steps:
      - name: Clone the Repository
        uses: actions/checkout@v3
      - name: Test with Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform
          framework: terraform
  TerraformConfig:
    name: "TerraformConfig"
    needs: CodeScanning
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    # Setup the current working directory
    defaults:
      run:
        working-directory: ${{github.workspace}}/fis-resource-action/ssm
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Clone The Repository
        uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: "arn:aws:iam::227622396901:role/github-oidc-assume-role"
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: "eu-west-2"
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{secrets.TF_API_TOKEN}}
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: |
          terraform init 
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        continue-on-error: true
        run: terraform fmt -check
      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false --out=tfplan -var-file="terraform.tfvars"
        # On push to "master", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: ${{ github.ref == 'refs/heads/main' }}
        run: terraform apply -var-file="terraform.tfvars" -auto-approve -input=false tfplan
